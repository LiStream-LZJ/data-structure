#include<stdio.h>
#include<iostream>
using namespace std;
#define MAX 100
#define INF 1e7
#define x 1000
typedef struct _graph
{
    int vexnum;
    int matrix[MAX][MAX];
}Graph;
int dist[MAX];
void dijkstra(Graph G)
{
    int i,j,k;
    int min;
    int vs=0;
    int tmp;
    int flag[MAX];
    for (i = 0; i < G.vexnum; i++)
    {
        flag[i] = 0;
        dist[i] = G.matrix[vs][i];
    }
    flag[vs] = 1;
    dist[vs] = 0;
    for (i = 1; i < G.vexnum; i++)
    {
        min = INF;
        for (j = 0; j < G.vexnum; j++)
        {
            if (flag[j]==0 && dist[j]<min)
            {
                min = dist[j];
                k = j;
            }
        }
        flag[k] = 1;
        for (j = 0; j < G.vexnum; j++)
        {
            tmp = (G.matrix[k][j]==INF ? INF : (min + G.matrix[k][j]));
            if (flag[j] == 0 && (tmp  < dist[j]) )
            {
                dist[j] = tmp;
            }
        }
    }
}
int change(char a[])
{
    int i,sum=0;
 
    for(i=0;a[i]!='\0';i++)
        {
            sum=sum*10+a[i]-'0';
        }
        return sum;
}
int main()
{
    int n,i,j;
    char a[1000];
    Graph G;
    while(~scanf("%d",&n))
    {
        G.vexnum=n;
        for(i=0;i<n;i++)
            G.matrix[i][i]=0;
        for(i=1;i<n;i++)
            for(j=0;j<i;j++)
            {scanf("%s",a);
            if(a[0]!='x')
            G.matrix[i][j]=change(a);
            else
             G.matrix[i][j]=x;
            G.matrix[j][i]=G.matrix[i][j];}
        dijkstra(G);
        int max=-1,vs=0;
        for (i = 0; i < G.vexnum; i++)
                if(dist[i]>max&&i!=vs)
                    max=dist[i];
        cout<<max<<endl;
    }
}
