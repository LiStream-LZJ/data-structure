#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include <malloc.h>
#include<iostream>
using namespace std;
typedef char TElemType;
typedef struct ThreadNode
{
	TElemType data;
	struct ThreadNode *lchild, *rchild;
	int ltag, rtag;
}ThreadNode, *ThreadTree;
void CreateThreadTree(ThreadTree &T)//ab#d##c#e## 先建立一棵二叉树，默认输入是按照先序遍历
{
	char c;
	cin >> c;
	if ('#' == c)
		T = NULL;
	else {
		T = new ThreadNode;
		T->data = c;
		CreateThreadTree(T->lchild);
		CreateThreadTree(T->rchild);
	}
}
void InThread(ThreadTree &p, ThreadTree &pre)//ｐｒｅ始终指向中序遍历时上一个刚刚访问过的结点；
{
	if (p != NULL)
	{
		cout << p->data << endl;
		InThread(p->lchild, pre);//递归线索化左子树；
			if (p->lchild == NULL)//左子树为空，建立前驱线索；
			{
				cout << p->data << endl;
				p->lchild = pre;
				p->ltag = 1;
			}
				if (pre != NULL && pre->rchild == NULL)//建立前驱结点的后继线索；
				{
					cout << p->data << endl;
					pre->rchild = p;
					pre->rtag = 1;
				}
			pre = p;//标记当前结点成为刚刚访问过的结点；
				InThread(p->rchild, pre);//递归线索化右子树；
	}
}
void CreateInThread(ThreadTree T)//通过中序遍历建立中序线索二叉树,
{
	ThreadTree pre = NULL;
	if (T != NULL)
	{
		cout << T->data << endl;
		InThread(T, pre);//对非空二叉树线索化
			pre->rchild = NULL;//处理遍历的最后一个结点
			pre->rtag = 1;
	}
}
ThreadNode *FirstNode(ThreadNode *p)
{
	while (p->ltag != 1)//如果有左孩子，迭代至左孩子
		p = p->lchild;
	return p;
}
ThreadNode *NextNode(ThreadNode *p)
{
	if (p->rtag != 1)//如果有右孩子，则该结点的后继结点为该结点右子树在中序序列中的第一个结点；
		return FirstNode(p->rchild);
	else
		return p->rchild;//如果没有右孩子，直接返回后继结点；
}
void InOrderThread(ThreadNode *T)
{
	for (ThreadNode *p = FirstNode(T); p != NULL; p = NextNode(p))
	{
		cout << p->data << " ";
	}
}
int main()
{
	ThreadTree T; //定义一颗二叉树；
	CreateThreadTree(T); //构造二叉树；
	CreateInThread(T);//对二叉树线索化；
	InOrderThread(T);//对线索二叉树实现非递归的中序遍历；
	system("pause");
	return 0;
}
