#include<stdlib.h>
#include<iostream>
using namespace std;
typedef char ElemType;
typedef struct BiTNode
{
	ElemType data;
	struct BiTNode *lchild, *rchild;
}BiTNode,*BiTree;
void CreateBiTree(BiTree *T)
{
	ElemType ch;
	cin >> ch;
	if (ch == '#')
		*T = NULL;  //保证是叶结点
	else
	{
		*T = (BiTree)malloc(sizeof(BiTNode));
		//if (!*T)
		//exit(OVERFLOW); //内存分配失败则退出。
		(*T)->data = ch;//生成结点
		CreateBiTree(&(*T)->lchild);//构造左子树
		CreateBiTree(&(*T)->rchild);//构造右子树    
	}
}
//表示对遍历到的结点数据进行的处理操作,此处操作是将树结点前序遍历输出
void operation1(ElemType ch)
{
	cout << ch << " ";
}
//此处在输出的基础上，并输出层数
void operation2(ElemType ch, int level)
{
	cout << ch << "在第" << level << "层" << endl;
}


//递归方式前序遍历二叉树
void PreOrderTraverse(BiTree T, int level)
{
	if (T == NULL)
		return;
	/*此处表示对遍历的树结点进行的操作，根据你自己的要求进行操作，这里只是输出了结点的数据*/
	//operation1(T->data);
	operation2(T->data, level); //输出了层数

	PreOrderTraverse(T->lchild, level + 1);
	PreOrderTraverse(T->rchild, level + 1);
}
void InOrderTraverse(BiTree T, int level)//递归方式中序遍历二叉树
{
	if (T == NULL)
		return;
	InOrderTraverse(T->lchild, level + 1);

	//operation1(T->data);
	operation2(T->data, level); //输出了层数

	InOrderTraverse(T->rchild, level + 1);
}
void PostOrderTraverse(BiTree T, int level)//递归方式后序遍历二叉树
{
	if (T == NULL)
		return;
	PostOrderTraverse(T->lchild, level + 1);
	PostOrderTraverse(T->rchild, level + 1);

	//operation1(T->data);
	operation2(T->data, level); //输出了层数
}
void Cope(BiTree T, BiTree &NewT)
{
	if (T == NULL)
	{
		NewT = NULL;
		return;
	}
	else
	{
		NewT = new BiTNode;
		NewT->data = T->data;
		Cope(T->lchild, NewT->lchild);
		Cope(T->rchild, NewT->rchild);
	}
}
int m;
int n;
int Depth(BiTree T)
{
	if (T == NULL) return 0;
	else
	{
		m = Depth(T->lchild);
		n = Depth(T->rchild);
		if (m > n) return (m + 1);
		else return (n + 1);
	}
}
int NodeCount(BiTree T)
{
	if (T == NULL) return 0;
	else return NodeCount(T->lchild) + NodeCount(T->rchild) + 1;
}
int main()
{
	int level=1;//表示层数
	BiTree T=NULL;
	BiTree NewT=NULL;
	cout << "请以前序遍历的方式输入扩展二叉树："; //类似输入AB#D##C##
	CreateBiTree(&T); //建立二叉树
	PreOrderTraverse(T, level);//进行前序遍历，其中operation1()和operation2()函数表示对遍历的结点数据进行的处理操作
	cout << endl;

	cout << "递归中序遍历输出为：" << endl;
	InOrderTraverse(T, level);
	cout << endl;

	cout << "递归后序遍历输出为：" << endl;
	PostOrderTraverse(T, level);
	cout << endl;

	Cope(T,NewT);
	printf("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
	InOrderTraverse(NewT, level);
	cout << "共"<<Depth(T)<<"层" << endl;
	cout << "共" << NodeCount(T) << "个结点" << endl;

	return 0;
}
