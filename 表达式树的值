#include <iostream>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
using namespace std;
typedef struct tree
{
    char data[4];
    int h;
    int depth;
    struct tree *lchild,*rchild;
}Node,*TNode;
char d[100][100];
int q=0,num1,sum;
void creattree(int y,int num,TNode &T)
{
    if(d[q][0]=='#') {T=NULL;q++;}
    else
    {
        T=new Node;
        if(y==1) T->h=1;
        else T->h=0;
        T->depth=++num;
        strcpy(T->data,d[q++]);
        creattree(1,T->depth,T->lchild);
        creattree(0,T->depth,T->rchild);
    }
}
void travel(TNode T)
{
    if(T!=NULL)
    {
        if(T->data[0]=='+'||T->data[0]=='-'||T->data[0]=='*'||T->data[0]=='/')
        {
            cout<<'(';
            travel(T->lchild);
            cout<<T->data;
        travel(T->rchild);
        cout<<')';
        }
        else
        cout<<T->data;
    }
}
int calculate(TNode T)
{
    if(T!=NULL)
    {
        if(T->data[0]=='+'||T->data[0]=='-'||T->data[0]=='*'||T->data[0]=='/')
        {
            switch(T->data[0])
            {
                case'*':return(calculate(T->lchild)*calculate(T->rchild));break;
                case'/':return(calculate(T->lchild)/calculate(T->rchild));break;
                case'+':return(calculate(T->lchild)+calculate(T->rchild));break;
                case'-':return(calculate(T->lchild)-calculate(T->rchild));break;
            }
        }
        else
        {
            char a[1005];
            strcpy(a,T->data);
            int i,x;
            for(i=0,x=0;a[i]!='\0';i++)
            {
                x=x*10+a[i]-'0';
            }
            return x;
        }
    }
}
int main()
{
    int i,j,k;
    char a[100];
    TNode T;
    while(gets(a)!=NULL)
    {
        j=0,k=0;
        q=0; sum=0;
        for(i=0;a[i]!='\0';i++)
        {
            if(a[i]==' ')
                {
                    d[j][k++]='\0';
                    k=0;
                    j++;
                }
            else d[j][k++]=a[i];

        }
        d[j++][k++]='\0';
        creattree(2,0,T);
        travel(T);
        cout<<'='<<calculate(T)<<endl;
    }
}
